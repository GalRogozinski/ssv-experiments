// Code generated by fastssz. DO NOT EDIT.
// Hash: e14dbc1f983825684280dc08b85e352330d4484c55ca79c79ce46d6f52c50f7c
// Version: 0.1.2
package qbft

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssz_encoding/types"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Height'
	dst = ssz.MarshalUint64(dst, m.Height)

	// Field (1) 'Round'
	dst = ssz.MarshalUint64(dst, m.Round)

	// Field (2) 'Root'
	if size := len(m.Root); size != 32 {
		err = ssz.ErrBytesLengthFn("Message.Root", size, 32)
		return
	}
	dst = append(dst, m.Root...)

	// Field (3) 'PreparedRound'
	dst = ssz.MarshalUint64(dst, m.PreparedRound)

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 56 {
		return ssz.ErrSize
	}

	// Field (0) 'Height'
	m.Height = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Round'
	m.Round = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Root'
	if cap(m.Root) == 0 {
		m.Root = make([]byte, 0, len(buf[16:48]))
	}
	m.Root = append(m.Root, buf[16:48]...)

	// Field (3) 'PreparedRound'
	m.PreparedRound = ssz.UnmarshallUint64(buf[48:56])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 56
	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Height'
	hh.PutUint64(m.Height)

	// Field (1) 'Round'
	hh.PutUint64(m.Round)

	// Field (2) 'Root'
	if size := len(m.Root); size != 32 {
		err = ssz.ErrBytesLengthFn("Message.Root", size, 32)
		return
	}
	hh.PutBytes(m.Root)

	// Field (3) 'PreparedRound'
	hh.PutUint64(m.PreparedRound)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the SignedMessage object
func (s *SignedMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedMessage object to a target array
func (s *SignedMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(164)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (1) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Field (2) 'Signature'
	dst = append(dst, s.Signature[:]...)

	// Offset (3) 'Justifications'
	dst = ssz.WriteOffset(dst, offset)
	if s.Justifications == nil {
		s.Justifications = new(Justifications)
	}
	offset += s.Justifications.SizeSSZ()

	// Offset (4) 'Object'
	dst = ssz.WriteOffset(dst, offset)
	if s.Object == nil {
		s.Object = new(types.ConsensusInput)
	}
	offset += s.Object.SizeSSZ()

	// Field (1) 'Signers'
	if size := len(s.Signers); size > 13 {
		err = ssz.ErrListTooBigFn("SignedMessage.Signers", size, 13)
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, s.Signers[ii])
	}

	// Field (3) 'Justifications'
	if dst, err = s.Justifications.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'Object'
	if dst, err = s.Object.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedMessage object
func (s *SignedMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 164 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o3, o4 uint64

	// Field (0) 'Message'
	if err = s.Message.UnmarshalSSZ(buf[0:56]); err != nil {
		return err
	}

	// Offset (1) 'Signers'
	if o1 = ssz.ReadOffset(buf[56:60]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 164 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Signature'
	copy(s.Signature[:], buf[60:156])

	// Offset (3) 'Justifications'
	if o3 = ssz.ReadOffset(buf[156:160]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'Object'
	if o4 = ssz.ReadOffset(buf[160:164]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (1) 'Signers'
	{
		buf = tail[o1:o3]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		s.Signers = ssz.ExtendUint64(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (3) 'Justifications'
	{
		buf = tail[o3:o4]
		if s.Justifications == nil {
			s.Justifications = new(Justifications)
		}
		if err = s.Justifications.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (4) 'Object'
	{
		buf = tail[o4:]
		if s.Object == nil {
			s.Object = new(types.ConsensusInput)
		}
		if err = s.Object.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedMessage object
func (s *SignedMessage) SizeSSZ() (size int) {
	size = 164

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	// Field (3) 'Justifications'
	if s.Justifications == nil {
		s.Justifications = new(Justifications)
	}
	size += s.Justifications.SizeSSZ()

	// Field (4) 'Object'
	if s.Object == nil {
		s.Object = new(types.ConsensusInput)
	}
	size += s.Object.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedMessage object
func (s *SignedMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedMessage object with a hasher
func (s *SignedMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signers'
	{
		if size := len(s.Signers); size > 13 {
			err = ssz.ErrListTooBigFn("SignedMessage.Signers", size, 13)
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Signers {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Signers))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (2) 'Signature'
	hh.PutBytes(s.Signature[:])

	// Field (3) 'Justifications'
	if err = s.Justifications.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'Object'
	if err = s.Object.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedMessage object
func (s *SignedMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the Justifications object
func (j *Justifications) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(j)
}

// MarshalSSZTo ssz marshals the Justifications object to a target array
func (j *Justifications) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'RoundChangeJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(j.RoundChangeJustifications); ii++ {
		offset += 4
		offset += len(j.RoundChangeJustifications[ii])
	}

	// Offset (1) 'ProposalJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(j.ProposalJustifications); ii++ {
		offset += 4
		offset += len(j.ProposalJustifications[ii])
	}

	// Field (0) 'RoundChangeJustifications'
	if size := len(j.RoundChangeJustifications); size > 13 {
		err = ssz.ErrListTooBigFn("Justifications.RoundChangeJustifications", size, 13)
		return
	}
	{
		offset = 4 * len(j.RoundChangeJustifications)
		for ii := 0; ii < len(j.RoundChangeJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(j.RoundChangeJustifications[ii])
		}
	}
	for ii := 0; ii < len(j.RoundChangeJustifications); ii++ {
		if size := len(j.RoundChangeJustifications[ii]); size > 1024 {
			err = ssz.ErrBytesLengthFn("Justifications.RoundChangeJustifications[ii]", size, 1024)
			return
		}
		dst = append(dst, j.RoundChangeJustifications[ii]...)
	}

	// Field (1) 'ProposalJustifications'
	if size := len(j.ProposalJustifications); size > 13 {
		err = ssz.ErrListTooBigFn("Justifications.ProposalJustifications", size, 13)
		return
	}
	{
		offset = 4 * len(j.ProposalJustifications)
		for ii := 0; ii < len(j.ProposalJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(j.ProposalJustifications[ii])
		}
	}
	for ii := 0; ii < len(j.ProposalJustifications); ii++ {
		if size := len(j.ProposalJustifications[ii]); size > 1024 {
			err = ssz.ErrBytesLengthFn("Justifications.ProposalJustifications[ii]", size, 1024)
			return
		}
		dst = append(dst, j.ProposalJustifications[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Justifications object
func (j *Justifications) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'RoundChangeJustifications'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'ProposalJustifications'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'RoundChangeJustifications'
	{
		buf = tail[o0:o1]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		j.RoundChangeJustifications = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1024 {
				return ssz.ErrBytesLength
			}
			if cap(j.RoundChangeJustifications[indx]) == 0 {
				j.RoundChangeJustifications[indx] = make([]byte, 0, len(buf))
			}
			j.RoundChangeJustifications[indx] = append(j.RoundChangeJustifications[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (1) 'ProposalJustifications'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		j.ProposalJustifications = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1024 {
				return ssz.ErrBytesLength
			}
			if cap(j.ProposalJustifications[indx]) == 0 {
				j.ProposalJustifications[indx] = make([]byte, 0, len(buf))
			}
			j.ProposalJustifications[indx] = append(j.ProposalJustifications[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Justifications object
func (j *Justifications) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'RoundChangeJustifications'
	for ii := 0; ii < len(j.RoundChangeJustifications); ii++ {
		size += 4
		size += len(j.RoundChangeJustifications[ii])
	}

	// Field (1) 'ProposalJustifications'
	for ii := 0; ii < len(j.ProposalJustifications); ii++ {
		size += 4
		size += len(j.ProposalJustifications[ii])
	}

	return
}

// HashTreeRoot ssz hashes the Justifications object
func (j *Justifications) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(j)
}

// HashTreeRootWith ssz hashes the Justifications object with a hasher
func (j *Justifications) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'RoundChangeJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(j.RoundChangeJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range j.RoundChangeJustifications {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1024 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1024+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (1) 'ProposalJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(j.ProposalJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range j.ProposalJustifications {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1024 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1024+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Justifications object
func (j *Justifications) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(j)
}
