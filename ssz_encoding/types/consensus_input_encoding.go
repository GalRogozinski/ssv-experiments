// Code generated by fastssz. DO NOT EDIT.
// Hash: 35dd617057f47be7f5b43585c954d9515545dec59cdc210c1e7f78f2cccfe447
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ConsensusInput object
func (c *ConsensusInput) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConsensusInput object to a target array
func (c *ConsensusInput) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the ConsensusInput object
func (c *ConsensusInput) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConsensusInput object
func (c *ConsensusInput) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the ConsensusInput object
func (c *ConsensusInput) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConsensusInput object with a hasher
func (c *ConsensusInput) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ConsensusInput object
func (c *ConsensusInput) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
