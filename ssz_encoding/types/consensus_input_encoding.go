// Code generated by fastssz. DO NOT EDIT.
// Hash: b378efb50a9574c97e517570e3562b5ca89238ca4e3849d418a3c3c150ae846f
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ConsensusInput object
func (c *ConsensusInput) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConsensusInput object to a target array
func (c *ConsensusInput) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(108)

	// Field (0) 'Duty'
	if dst, err = c.Duty.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (1) 'DataSSZ'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.DataSSZ)

	// Field (1) 'DataSSZ'
	if size := len(c.DataSSZ); size > 2048 {
		err = ssz.ErrBytesLengthFn("ConsensusInput.DataSSZ", size, 2048)
		return
	}
	dst = append(dst, c.DataSSZ...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConsensusInput object
func (c *ConsensusInput) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 108 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Duty'
	if err = c.Duty.UnmarshalSSZ(buf[0:104]); err != nil {
		return err
	}

	// Offset (1) 'DataSSZ'
	if o1 = ssz.ReadOffset(buf[104:108]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 108 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'DataSSZ'
	{
		buf = tail[o1:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(c.DataSSZ) == 0 {
			c.DataSSZ = make([]byte, 0, len(buf))
		}
		c.DataSSZ = append(c.DataSSZ, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConsensusInput object
func (c *ConsensusInput) SizeSSZ() (size int) {
	size = 108

	// Field (1) 'DataSSZ'
	size += len(c.DataSSZ)

	return
}

// HashTreeRoot ssz hashes the ConsensusInput object
func (c *ConsensusInput) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConsensusInput object with a hasher
func (c *ConsensusInput) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Duty'
	if err = c.Duty.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'DataSSZ'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(c.DataSSZ))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(c.DataSSZ)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ConsensusInput object
func (c *ConsensusInput) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
