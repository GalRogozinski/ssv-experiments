// Code generated by fastssz. DO NOT EDIT.
// Hash: accd2a6cefd2d7bdea089ad9610b82f6d3503a550b3b78e5a31471b5f0a58c39
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Duty object
func (d *Duty) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the Duty object to a target array
func (d *Duty) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Type'
	dst = ssz.MarshalUint64(dst, uint64(d.Type))

	// Field (1) 'PubKey'
	dst = append(dst, d.PubKey[:]...)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, d.Slot)

	// Field (3) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, d.ValidatorIndex)

	// Field (4) 'CommitteeIndex'
	dst = ssz.MarshalUint64(dst, d.CommitteeIndex)

	// Field (5) 'CommitteeLength'
	dst = ssz.MarshalUint64(dst, d.CommitteeLength)

	// Field (6) 'CommitteesAtSlot'
	dst = ssz.MarshalUint64(dst, d.CommitteesAtSlot)

	// Field (7) 'ValidatorCommitteeIndex'
	dst = ssz.MarshalUint64(dst, d.ValidatorCommitteeIndex)

	return
}

// UnmarshalSSZ ssz unmarshals the Duty object
func (d *Duty) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 104 {
		return ssz.ErrSize
	}

	// Field (0) 'Type'
	d.Type = BeaconRole(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'PubKey'
	copy(d.PubKey[:], buf[8:56])

	// Field (2) 'Slot'
	d.Slot = ssz.UnmarshallUint64(buf[56:64])

	// Field (3) 'ValidatorIndex'
	d.ValidatorIndex = ssz.UnmarshallUint64(buf[64:72])

	// Field (4) 'CommitteeIndex'
	d.CommitteeIndex = ssz.UnmarshallUint64(buf[72:80])

	// Field (5) 'CommitteeLength'
	d.CommitteeLength = ssz.UnmarshallUint64(buf[80:88])

	// Field (6) 'CommitteesAtSlot'
	d.CommitteesAtSlot = ssz.UnmarshallUint64(buf[88:96])

	// Field (7) 'ValidatorCommitteeIndex'
	d.ValidatorCommitteeIndex = ssz.UnmarshallUint64(buf[96:104])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Duty object
func (d *Duty) SizeSSZ() (size int) {
	size = 104
	return
}

// HashTreeRoot ssz hashes the Duty object
func (d *Duty) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the Duty object with a hasher
func (d *Duty) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	hh.PutUint64(uint64(d.Type))

	// Field (1) 'PubKey'
	hh.PutBytes(d.PubKey[:])

	// Field (2) 'Slot'
	hh.PutUint64(d.Slot)

	// Field (3) 'ValidatorIndex'
	hh.PutUint64(d.ValidatorIndex)

	// Field (4) 'CommitteeIndex'
	hh.PutUint64(d.CommitteeIndex)

	// Field (5) 'CommitteeLength'
	hh.PutUint64(d.CommitteeLength)

	// Field (6) 'CommitteesAtSlot'
	hh.PutUint64(d.CommitteesAtSlot)

	// Field (7) 'ValidatorCommitteeIndex'
	hh.PutUint64(d.ValidatorCommitteeIndex)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Duty object
func (d *Duty) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(d)
}
