// Code generated by fastssz. DO NOT EDIT.
// Hash: 5c94ce8e87cc6ccf5671fcb6e56038eb046d05ab419f5647141d0068e3abdf5e
package dkg

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'DataSSZSnappy'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.DataSSZSnappy)

	// Field (0) 'DataSSZSnappy'
	if size := len(m.DataSSZSnappy); size > 2048 {
		err = ssz.ErrBytesLengthFn("Message.DataSSZSnappy", size, 2048)
		return
	}
	dst = append(dst, m.DataSSZSnappy...)

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'DataSSZSnappy'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'DataSSZSnappy'
	{
		buf = tail[o0:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(m.DataSSZSnappy) == 0 {
			m.DataSSZSnappy = make([]byte, 0, len(buf))
		}
		m.DataSSZSnappy = append(m.DataSSZSnappy, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'DataSSZSnappy'
	size += len(m.DataSSZSnappy)

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'DataSSZSnappy'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.DataSSZSnappy))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(m.DataSSZSnappy)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the SignedMessage object
func (s *SignedMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedMessage object to a target array
func (s *SignedMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(77)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Message.SizeSSZ()

	// Field (1) 'Signer'
	dst = ssz.MarshalUint64(dst, s.Signer)

	// Field (2) 'Signature'
	dst = append(dst, s.Signature[:]...)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedMessage object
func (s *SignedMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 77 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 77 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signer'
	s.Signer = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'Signature'
	copy(s.Signature[:], buf[12:77])

	// Field (0) 'Message'
	{
		buf = tail[o0:]
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedMessage object
func (s *SignedMessage) SizeSSZ() (size int) {
	size = 77

	// Field (0) 'Message'
	size += s.Message.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedMessage object
func (s *SignedMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedMessage object with a hasher
func (s *SignedMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signer'
	hh.PutUint64(s.Signer)

	// Field (2) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedMessage object
func (s *SignedMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the Init object
func (i *Init) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Init object to a target array
func (i *Init) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(42)

	// Offset (0) 'OperatorIDs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.OperatorIDs) * 8

	// Field (1) 'Threshold'
	dst = ssz.MarshalUint16(dst, i.Threshold)

	// Field (2) 'WithdrawalCredentials'
	if size := len(i.WithdrawalCredentials); size != 32 {
		err = ssz.ErrBytesLengthFn("Init.WithdrawalCredentials", size, 32)
		return
	}
	dst = append(dst, i.WithdrawalCredentials...)

	// Field (3) 'Fork'
	dst = append(dst, i.Fork[:]...)

	// Field (0) 'OperatorIDs'
	if size := len(i.OperatorIDs); size > 13 {
		err = ssz.ErrListTooBigFn("Init.OperatorIDs", size, 13)
		return
	}
	for ii := 0; ii < len(i.OperatorIDs); ii++ {
		dst = ssz.MarshalUint64(dst, i.OperatorIDs[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Init object
func (i *Init) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 42 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'OperatorIDs'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 42 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Threshold'
	i.Threshold = ssz.UnmarshallUint16(buf[4:6])

	// Field (2) 'WithdrawalCredentials'
	if cap(i.WithdrawalCredentials) == 0 {
		i.WithdrawalCredentials = make([]byte, 0, len(buf[6:38]))
	}
	i.WithdrawalCredentials = append(i.WithdrawalCredentials, buf[6:38]...)

	// Field (3) 'Fork'
	copy(i.Fork[:], buf[38:42])

	// Field (0) 'OperatorIDs'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		i.OperatorIDs = ssz.ExtendUint64(i.OperatorIDs, num)
		for ii := 0; ii < num; ii++ {
			i.OperatorIDs[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Init object
func (i *Init) SizeSSZ() (size int) {
	size = 42

	// Field (0) 'OperatorIDs'
	size += len(i.OperatorIDs) * 8

	return
}

// HashTreeRoot ssz hashes the Init object
func (i *Init) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Init object with a hasher
func (i *Init) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorIDs'
	{
		if size := len(i.OperatorIDs); size > 13 {
			err = ssz.ErrListTooBigFn("Init.OperatorIDs", size, 13)
			return
		}
		subIndx := hh.Index()
		for _, i := range i.OperatorIDs {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(i.OperatorIDs))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (1) 'Threshold'
	hh.PutUint16(i.Threshold)

	// Field (2) 'WithdrawalCredentials'
	if size := len(i.WithdrawalCredentials); size != 32 {
		err = ssz.ErrBytesLengthFn("Init.WithdrawalCredentials", size, 32)
		return
	}
	hh.PutBytes(i.WithdrawalCredentials)

	// Field (3) 'Fork'
	hh.PutBytes(i.Fork[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Init object
func (i *Init) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}

// MarshalSSZ ssz marshals the Output object
func (o *Output) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(o)
}

// MarshalSSZTo ssz marshals the Output object to a target array
func (o *Output) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'EncryptedShare'
	dst = append(dst, o.EncryptedShare[:]...)

	// Field (1) 'SharePubKey'
	dst = append(dst, o.SharePubKey[:]...)

	// Field (2) 'ValidatorPubKey'
	dst = append(dst, o.ValidatorPubKey[:]...)

	// Field (3) 'DepositDataSignature'
	dst = append(dst, o.DepositDataSignature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Output object
func (o *Output) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 448 {
		return ssz.ErrSize
	}

	// Field (0) 'EncryptedShare'
	copy(o.EncryptedShare[:], buf[0:256])

	// Field (1) 'SharePubKey'
	copy(o.SharePubKey[:], buf[256:304])

	// Field (2) 'ValidatorPubKey'
	copy(o.ValidatorPubKey[:], buf[304:352])

	// Field (3) 'DepositDataSignature'
	copy(o.DepositDataSignature[:], buf[352:448])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Output object
func (o *Output) SizeSSZ() (size int) {
	size = 448
	return
}

// HashTreeRoot ssz hashes the Output object
func (o *Output) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(o)
}

// HashTreeRootWith ssz hashes the Output object with a hasher
func (o *Output) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'EncryptedShare'
	hh.PutBytes(o.EncryptedShare[:])

	// Field (1) 'SharePubKey'
	hh.PutBytes(o.SharePubKey[:])

	// Field (2) 'ValidatorPubKey'
	hh.PutBytes(o.ValidatorPubKey[:])

	// Field (3) 'DepositDataSignature'
	hh.PutBytes(o.DepositDataSignature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Output object
func (o *Output) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(o)
}

// MarshalSSZ ssz marshals the SignedOutput object
func (s *SignedOutput) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedOutput object to a target array
func (s *SignedOutput) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Data'
	if dst, err = s.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Signer'
	dst = ssz.MarshalUint64(dst, s.Signer)

	// Field (2) 'Signature'
	dst = append(dst, s.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SignedOutput object
func (s *SignedOutput) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 521 {
		return ssz.ErrSize
	}

	// Field (0) 'Data'
	if err = s.Data.UnmarshalSSZ(buf[0:448]); err != nil {
		return err
	}

	// Field (1) 'Signer'
	s.Signer = ssz.UnmarshallUint64(buf[448:456])

	// Field (2) 'Signature'
	copy(s.Signature[:], buf[456:521])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedOutput object
func (s *SignedOutput) SizeSSZ() (size int) {
	size = 521
	return
}

// HashTreeRoot ssz hashes the SignedOutput object
func (s *SignedOutput) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedOutput object with a hasher
func (s *SignedOutput) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	if err = s.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signer'
	hh.PutUint64(s.Signer)

	// Field (2) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedOutput object
func (s *SignedOutput) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
