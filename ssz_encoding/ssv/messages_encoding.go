// Code generated by fastssz. DO NOT EDIT.
// Hash: 2bb5b83b453056f0fbfef7dabf15b45ecf2e441f5635d323ae21a864d9aba5c9
package ssv

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssz_encoding/qbft"
	"ssv-experiments/ssz_encoding/types"
)

// MarshalSSZ ssz marshals the PartialSignature object
func (p *PartialSignature) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialSignature object to a target array
func (p *PartialSignature) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(148)

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, p.Slot)

	// Field (1) 'Signature'
	dst = append(dst, p.Signature[:]...)

	// Field (2) 'SigningRoot'
	dst = append(dst, p.SigningRoot[:]...)

	// Field (3) 'Signer'
	dst = ssz.MarshalUint64(dst, p.Signer)

	// Offset (4) 'Justification'
	dst = ssz.WriteOffset(dst, offset)
	if p.Justification == nil {
		p.Justification = new(qbft.SignedMessageHeader)
	}
	offset += p.Justification.SizeSSZ()

	// Field (4) 'Justification'
	if dst, err = p.Justification.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PartialSignature object
func (p *PartialSignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 148 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'Slot'
	p.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Signature'
	copy(p.Signature[:], buf[8:104])

	// Field (2) 'SigningRoot'
	copy(p.SigningRoot[:], buf[104:136])

	// Field (3) 'Signer'
	p.Signer = ssz.UnmarshallUint64(buf[136:144])

	// Offset (4) 'Justification'
	if o4 = ssz.ReadOffset(buf[144:148]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 148 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'Justification'
	{
		buf = tail[o4:]
		if p.Justification == nil {
			p.Justification = new(qbft.SignedMessageHeader)
		}
		if err = p.Justification.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialSignature object
func (p *PartialSignature) SizeSSZ() (size int) {
	size = 148

	// Field (4) 'Justification'
	if p.Justification == nil {
		p.Justification = new(qbft.SignedMessageHeader)
	}
	size += p.Justification.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the PartialSignature object
func (p *PartialSignature) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialSignature object with a hasher
func (p *PartialSignature) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(p.Slot)

	// Field (1) 'Signature'
	hh.PutBytes(p.Signature[:])

	// Field (2) 'SigningRoot'
	hh.PutBytes(p.SigningRoot[:])

	// Field (3) 'Signer'
	hh.PutUint64(p.Signer)

	// Field (4) 'Justification'
	if err = p.Justification.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PartialSignature object
func (p *PartialSignature) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the SignedPartialSignatures object
func (s *SignedPartialSignatures) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedPartialSignatures object to a target array
func (s *SignedPartialSignatures) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(56)

	// Field (0) 'ID'
	dst = append(dst, s.ID[:]...)

	// Offset (1) 'PartialSignatures'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.PartialSignatures); ii++ {
		offset += 4
		offset += s.PartialSignatures[ii].SizeSSZ()
	}

	// Field (1) 'PartialSignatures'
	if size := len(s.PartialSignatures); size > 13 {
		err = ssz.ErrListTooBigFn("SignedPartialSignatures.PartialSignatures", size, 13)
		return
	}
	{
		offset = 4 * len(s.PartialSignatures)
		for ii := 0; ii < len(s.PartialSignatures); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.PartialSignatures[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.PartialSignatures); ii++ {
		if dst, err = s.PartialSignatures[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedPartialSignatures object
func (s *SignedPartialSignatures) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 56 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'ID'
	copy(s.ID[:], buf[0:52])

	// Offset (1) 'PartialSignatures'
	if o1 = ssz.ReadOffset(buf[52:56]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 56 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'PartialSignatures'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.PartialSignatures = make([]*PartialSignature, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.PartialSignatures[indx] == nil {
				s.PartialSignatures[indx] = new(PartialSignature)
			}
			if err = s.PartialSignatures[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedPartialSignatures object
func (s *SignedPartialSignatures) SizeSSZ() (size int) {
	size = 56

	// Field (1) 'PartialSignatures'
	for ii := 0; ii < len(s.PartialSignatures); ii++ {
		size += 4
		size += s.PartialSignatures[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the SignedPartialSignatures object
func (s *SignedPartialSignatures) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedPartialSignatures object with a hasher
func (s *SignedPartialSignatures) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ID'
	hh.PutBytes(s.ID[:])

	// Field (1) 'PartialSignatures'
	{
		subIndx := hh.Index()
		num := uint64(len(s.PartialSignatures))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.PartialSignatures {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedPartialSignatures object
func (s *SignedPartialSignatures) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
