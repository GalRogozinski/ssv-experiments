// Code generated by fastssz. DO NOT EDIT.
// Hash: 326710db66a4d6e10750c4952db9381b2f42fda61247f473b4e4c5d692f74673
package ssv

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssz_encoding/qbft"
	"ssv-experiments/ssz_encoding/types"
)

// MarshalSSZ ssz marshals the State object
func (s *State) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the State object to a target array
func (s *State) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(37)

	// Offset (0) 'PreConsensusContainer'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.PreConsensusContainer); ii++ {
		offset += 4
		offset += s.PreConsensusContainer[ii].SizeSSZ()
	}

	// Offset (1) 'PostConsensusContainer'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.PostConsensusContainer); ii++ {
		offset += 4
		offset += s.PostConsensusContainer[ii].SizeSSZ()
	}

	// Offset (2) 'RunningInstance'
	dst = ssz.WriteOffset(dst, offset)
	if s.RunningInstance == nil {
		s.RunningInstance = new(qbft.Instance)
	}
	offset += s.RunningInstance.SizeSSZ()

	// Offset (3) 'DecidedValue'
	dst = ssz.WriteOffset(dst, offset)
	if s.DecidedValue == nil {
		s.DecidedValue = new(types.ConsensusInput)
	}
	offset += s.DecidedValue.SizeSSZ()

	// Offset (4) 'StartingDuty'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.StartingDuty.SizeSSZ()

	// Field (5) 'Finished'
	dst = ssz.MarshalBool(dst, s.Finished)

	// Offset (6) 'Share'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Share.SizeSSZ()

	// Offset (7) 'QBFTController'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.QBFTController.SizeSSZ()

	// Field (8) 'BeaconNetwork'
	dst = append(dst, s.BeaconNetwork[:]...)

	// Field (9) 'BeaconRole'
	dst = append(dst, s.BeaconRole[:]...)

	// Field (0) 'PreConsensusContainer'
	if size := len(s.PreConsensusContainer); size > 13 {
		err = ssz.ErrListTooBigFn("State.PreConsensusContainer", size, 13)
		return
	}
	{
		offset = 4 * len(s.PreConsensusContainer)
		for ii := 0; ii < len(s.PreConsensusContainer); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.PreConsensusContainer[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.PreConsensusContainer); ii++ {
		if dst, err = s.PreConsensusContainer[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (1) 'PostConsensusContainer'
	if size := len(s.PostConsensusContainer); size > 13 {
		err = ssz.ErrListTooBigFn("State.PostConsensusContainer", size, 13)
		return
	}
	{
		offset = 4 * len(s.PostConsensusContainer)
		for ii := 0; ii < len(s.PostConsensusContainer); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.PostConsensusContainer[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.PostConsensusContainer); ii++ {
		if dst, err = s.PostConsensusContainer[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'RunningInstance'
	if dst, err = s.RunningInstance.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'DecidedValue'
	if dst, err = s.DecidedValue.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'StartingDuty'
	if dst, err = s.StartingDuty.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'Share'
	if dst, err = s.Share.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (7) 'QBFTController'
	if dst, err = s.QBFTController.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the State object
func (s *State) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 37 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3, o4, o6, o7 uint64

	// Offset (0) 'PreConsensusContainer'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 37 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'PostConsensusContainer'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'RunningInstance'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'DecidedValue'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'StartingDuty'
	if o4 = ssz.ReadOffset(buf[16:20]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (5) 'Finished'
	s.Finished = ssz.UnmarshalBool(buf[20:21])

	// Offset (6) 'Share'
	if o6 = ssz.ReadOffset(buf[21:25]); o6 > size || o4 > o6 {
		return ssz.ErrOffset
	}

	// Offset (7) 'QBFTController'
	if o7 = ssz.ReadOffset(buf[25:29]); o7 > size || o6 > o7 {
		return ssz.ErrOffset
	}

	// Field (8) 'BeaconNetwork'
	copy(s.BeaconNetwork[:], buf[29:33])

	// Field (9) 'BeaconRole'
	copy(s.BeaconRole[:], buf[33:37])

	// Field (0) 'PreConsensusContainer'
	{
		buf = tail[o0:o1]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.PreConsensusContainer = make([]*PartialSignature, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.PreConsensusContainer[indx] == nil {
				s.PreConsensusContainer[indx] = new(PartialSignature)
			}
			if err = s.PreConsensusContainer[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (1) 'PostConsensusContainer'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.PostConsensusContainer = make([]*PartialSignature, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.PostConsensusContainer[indx] == nil {
				s.PostConsensusContainer[indx] = new(PartialSignature)
			}
			if err = s.PostConsensusContainer[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'RunningInstance'
	{
		buf = tail[o2:o3]
		if s.RunningInstance == nil {
			s.RunningInstance = new(qbft.Instance)
		}
		if err = s.RunningInstance.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'DecidedValue'
	{
		buf = tail[o3:o4]
		if s.DecidedValue == nil {
			s.DecidedValue = new(types.ConsensusInput)
		}
		if err = s.DecidedValue.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (4) 'StartingDuty'
	{
		buf = tail[o4:o6]
		if err = s.StartingDuty.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (6) 'Share'
	{
		buf = tail[o6:o7]
		if err = s.Share.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (7) 'QBFTController'
	{
		buf = tail[o7:]
		if err = s.QBFTController.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the State object
func (s *State) SizeSSZ() (size int) {
	size = 37

	// Field (0) 'PreConsensusContainer'
	for ii := 0; ii < len(s.PreConsensusContainer); ii++ {
		size += 4
		size += s.PreConsensusContainer[ii].SizeSSZ()
	}

	// Field (1) 'PostConsensusContainer'
	for ii := 0; ii < len(s.PostConsensusContainer); ii++ {
		size += 4
		size += s.PostConsensusContainer[ii].SizeSSZ()
	}

	// Field (2) 'RunningInstance'
	if s.RunningInstance == nil {
		s.RunningInstance = new(qbft.Instance)
	}
	size += s.RunningInstance.SizeSSZ()

	// Field (3) 'DecidedValue'
	if s.DecidedValue == nil {
		s.DecidedValue = new(types.ConsensusInput)
	}
	size += s.DecidedValue.SizeSSZ()

	// Field (4) 'StartingDuty'
	size += s.StartingDuty.SizeSSZ()

	// Field (6) 'Share'
	size += s.Share.SizeSSZ()

	// Field (7) 'QBFTController'
	size += s.QBFTController.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the State object
func (s *State) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the State object with a hasher
func (s *State) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'PreConsensusContainer'
	{
		subIndx := hh.Index()
		num := uint64(len(s.PreConsensusContainer))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.PreConsensusContainer {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (1) 'PostConsensusContainer'
	{
		subIndx := hh.Index()
		num := uint64(len(s.PostConsensusContainer))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.PostConsensusContainer {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (2) 'RunningInstance'
	if err = s.RunningInstance.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'DecidedValue'
	if err = s.DecidedValue.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'StartingDuty'
	if err = s.StartingDuty.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'Finished'
	hh.PutBool(s.Finished)

	// Field (6) 'Share'
	if err = s.Share.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (7) 'QBFTController'
	if err = s.QBFTController.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (8) 'BeaconNetwork'
	hh.PutBytes(s.BeaconNetwork[:])

	// Field (9) 'BeaconRole'
	hh.PutBytes(s.BeaconRole[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the State object
func (s *State) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
