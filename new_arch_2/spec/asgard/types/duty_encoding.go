// Code generated by fastssz. DO NOT EDIT.
// Hash: 04e83e0ca39d508488f34b3a8658946528b90a13fd280c3e57913c85cfb905bd
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Duty object
func (d *Duty) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the Duty object to a target array
func (d *Duty) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(144)

	// Offset (0) 'BeaconNetwork'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.BeaconNetwork)

	// Field (1) 'Role'
	dst = ssz.MarshalUint64(dst, d.Role)

	// Field (2) 'ValidatorPK'
	dst = append(dst, d.ValidatorPK[:]...)

	// Field (3) 'Slot'
	dst = ssz.MarshalUint64(dst, d.Slot)

	// Field (4) 'DomainData'
	dst = append(dst, d.DomainData[:]...)

	// Field (5) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, d.ValidatorIndex)

	// Field (6) 'CommitteeIndex'
	dst = ssz.MarshalUint64(dst, d.CommitteeIndex)

	// Field (7) 'CommitteeLength'
	dst = ssz.MarshalUint64(dst, d.CommitteeLength)

	// Field (8) 'CommitteesAtSlot'
	dst = ssz.MarshalUint64(dst, d.CommitteesAtSlot)

	// Field (9) 'ValidatorCommitteeIndex'
	dst = ssz.MarshalUint64(dst, d.ValidatorCommitteeIndex)

	// Offset (10) 'ValidatorSyncCommitteeIndices'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.ValidatorSyncCommitteeIndices) * 8

	// Field (0) 'BeaconNetwork'
	if size := len(d.BeaconNetwork); size > 48 {
		err = ssz.ErrBytesLengthFn("Duty.BeaconNetwork", size, 48)
		return
	}
	dst = append(dst, d.BeaconNetwork...)

	// Field (10) 'ValidatorSyncCommitteeIndices'
	if size := len(d.ValidatorSyncCommitteeIndices); size > 13 {
		err = ssz.ErrListTooBigFn("Duty.ValidatorSyncCommitteeIndices", size, 13)
		return
	}
	for ii := 0; ii < len(d.ValidatorSyncCommitteeIndices); ii++ {
		dst = ssz.MarshalUint64(dst, d.ValidatorSyncCommitteeIndices[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Duty object
func (d *Duty) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 144 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o10 uint64

	// Offset (0) 'BeaconNetwork'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 144 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Role'
	d.Role = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'ValidatorPK'
	copy(d.ValidatorPK[:], buf[12:60])

	// Field (3) 'Slot'
	d.Slot = ssz.UnmarshallUint64(buf[60:68])

	// Field (4) 'DomainData'
	copy(d.DomainData[:], buf[68:100])

	// Field (5) 'ValidatorIndex'
	d.ValidatorIndex = ssz.UnmarshallUint64(buf[100:108])

	// Field (6) 'CommitteeIndex'
	d.CommitteeIndex = ssz.UnmarshallUint64(buf[108:116])

	// Field (7) 'CommitteeLength'
	d.CommitteeLength = ssz.UnmarshallUint64(buf[116:124])

	// Field (8) 'CommitteesAtSlot'
	d.CommitteesAtSlot = ssz.UnmarshallUint64(buf[124:132])

	// Field (9) 'ValidatorCommitteeIndex'
	d.ValidatorCommitteeIndex = ssz.UnmarshallUint64(buf[132:140])

	// Offset (10) 'ValidatorSyncCommitteeIndices'
	if o10 = ssz.ReadOffset(buf[140:144]); o10 > size || o0 > o10 {
		return ssz.ErrOffset
	}

	// Field (0) 'BeaconNetwork'
	{
		buf = tail[o0:o10]
		if len(buf) > 48 {
			return ssz.ErrBytesLength
		}
		if cap(d.BeaconNetwork) == 0 {
			d.BeaconNetwork = make([]byte, 0, len(buf))
		}
		d.BeaconNetwork = append(d.BeaconNetwork, buf...)
	}

	// Field (10) 'ValidatorSyncCommitteeIndices'
	{
		buf = tail[o10:]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		d.ValidatorSyncCommitteeIndices = ssz.ExtendUint64(d.ValidatorSyncCommitteeIndices, num)
		for ii := 0; ii < num; ii++ {
			d.ValidatorSyncCommitteeIndices[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Duty object
func (d *Duty) SizeSSZ() (size int) {
	size = 144

	// Field (0) 'BeaconNetwork'
	size += len(d.BeaconNetwork)

	// Field (10) 'ValidatorSyncCommitteeIndices'
	size += len(d.ValidatorSyncCommitteeIndices) * 8

	return
}

// HashTreeRoot ssz hashes the Duty object
func (d *Duty) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the Duty object with a hasher
func (d *Duty) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BeaconNetwork'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(d.BeaconNetwork))
		if byteLen > 48 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(d.BeaconNetwork)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (48+31)/32)
	}

	// Field (1) 'Role'
	hh.PutUint64(d.Role)

	// Field (2) 'ValidatorPK'
	hh.PutBytes(d.ValidatorPK[:])

	// Field (3) 'Slot'
	hh.PutUint64(d.Slot)

	// Field (4) 'DomainData'
	hh.PutBytes(d.DomainData[:])

	// Field (5) 'ValidatorIndex'
	hh.PutUint64(d.ValidatorIndex)

	// Field (6) 'CommitteeIndex'
	hh.PutUint64(d.CommitteeIndex)

	// Field (7) 'CommitteeLength'
	hh.PutUint64(d.CommitteeLength)

	// Field (8) 'CommitteesAtSlot'
	hh.PutUint64(d.CommitteesAtSlot)

	// Field (9) 'ValidatorCommitteeIndex'
	hh.PutUint64(d.ValidatorCommitteeIndex)

	// Field (10) 'ValidatorSyncCommitteeIndices'
	{
		if size := len(d.ValidatorSyncCommitteeIndices); size > 13 {
			err = ssz.ErrListTooBigFn("Duty.ValidatorSyncCommitteeIndices", size, 13)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.ValidatorSyncCommitteeIndices {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(d.ValidatorSyncCommitteeIndices))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Duty object
func (d *Duty) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(d)
}
