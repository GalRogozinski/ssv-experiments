// Code generated by fastssz. DO NOT EDIT.
// Hash: ed3713557497210c769f7e4cbc446a75e01a737e90c1043d51422c148e113f32
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Share object
func (s *Share) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the Share object to a target array
func (s *Share) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, s.OperatorID)

	// Field (1) 'ValidatorPubKey'
	dst = append(dst, s.ValidatorPubKey[:]...)

	// Field (2) 'Domain'
	dst = append(dst, s.Domain[:]...)

	// Field (3) 'Quorum'
	dst = ssz.MarshalUint64(dst, s.Quorum)

	// Field (4) 'PartialQuorum'
	dst = ssz.MarshalUint64(dst, s.PartialQuorum)

	return
}

// UnmarshalSSZ ssz unmarshals the Share object
func (s *Share) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 76 {
		return ssz.ErrSize
	}

	// Field (0) 'OperatorID'
	s.OperatorID = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ValidatorPubKey'
	copy(s.ValidatorPubKey[:], buf[8:56])

	// Field (2) 'Domain'
	copy(s.Domain[:], buf[56:60])

	// Field (3) 'Quorum'
	s.Quorum = ssz.UnmarshallUint64(buf[60:68])

	// Field (4) 'PartialQuorum'
	s.PartialQuorum = ssz.UnmarshallUint64(buf[68:76])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Share object
func (s *Share) SizeSSZ() (size int) {
	size = 76
	return
}

// HashTreeRoot ssz hashes the Share object
func (s *Share) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the Share object with a hasher
func (s *Share) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(s.OperatorID)

	// Field (1) 'ValidatorPubKey'
	hh.PutBytes(s.ValidatorPubKey[:])

	// Field (2) 'Domain'
	hh.PutBytes(s.Domain[:])

	// Field (3) 'Quorum'
	hh.PutUint64(s.Quorum)

	// Field (4) 'PartialQuorum'
	hh.PutUint64(s.PartialQuorum)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Share object
func (s *Share) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
