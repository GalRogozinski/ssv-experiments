// Code generated by fastssz. DO NOT EDIT.
// Hash: 28f1bff9b0341205241aaea6c9705c0356cb4f1ae56f6e99e8a7b01cf45c70f7
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Share object
func (s *Share) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the Share object to a target array
func (s *Share) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, s.OperatorID)

	// Field (1) 'ValidatorPubKey'
	dst = append(dst, s.ValidatorPubKey[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Share object
func (s *Share) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 56 {
		return ssz.ErrSize
	}

	// Field (0) 'OperatorID'
	s.OperatorID = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ValidatorPubKey'
	copy(s.ValidatorPubKey[:], buf[8:56])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Share object
func (s *Share) SizeSSZ() (size int) {
	size = 56
	return
}

// HashTreeRoot ssz hashes the Share object
func (s *Share) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the Share object with a hasher
func (s *Share) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(s.OperatorID)

	// Field (1) 'ValidatorPubKey'
	hh.PutBytes(s.ValidatorPubKey[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Share object
func (s *Share) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
