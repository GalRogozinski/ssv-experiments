// Code generated by fastssz. DO NOT EDIT.
// Hash: e70c0cec61e908f22d47c61370bac6075ee2340c0ff11810dc89d0d8096bf6ce
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PartialSignatureMessage object
func (p *PartialSignatureMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialSignatureMessage object to a target array
func (p *PartialSignatureMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Signature'
	dst = append(dst, p.Signature[:]...)

	// Field (1) 'Root'
	dst = append(dst, p.Root[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the PartialSignatureMessage object
func (p *PartialSignatureMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return ssz.ErrSize
	}

	// Field (0) 'Signature'
	copy(p.Signature[:], buf[0:96])

	// Field (1) 'Root'
	copy(p.Root[:], buf[96:128])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialSignatureMessage object
func (p *PartialSignatureMessage) SizeSSZ() (size int) {
	size = 128
	return
}

// HashTreeRoot ssz hashes the PartialSignatureMessage object
func (p *PartialSignatureMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialSignatureMessage object with a hasher
func (p *PartialSignatureMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Signature'
	hh.PutBytes(p.Signature[:])

	// Field (1) 'Root'
	hh.PutBytes(p.Root[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PartialSignatureMessage object
func (p *PartialSignatureMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the PartialSignatureMessages object
func (p *PartialSignatureMessages) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialSignatureMessages object to a target array
func (p *PartialSignatureMessages) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(76)

	// Field (0) 'Type'
	dst = ssz.MarshalUint64(dst, uint64(p.Type))

	// Field (1) 'Slot'
	dst = ssz.MarshalUint64(dst, p.Slot)

	// Field (2) 'Identifier'
	dst = append(dst, p.Identifier[:]...)

	// Offset (3) 'Signatures'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Signatures) * 128

	// Field (3) 'Signatures'
	if size := len(p.Signatures); size > 13 {
		err = ssz.ErrListTooBigFn("PartialSignatureMessages.Signatures", size, 13)
		return
	}
	for ii := 0; ii < len(p.Signatures); ii++ {
		if dst, err = p.Signatures[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PartialSignatureMessages object
func (p *PartialSignatureMessages) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 76 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'Type'
	p.Type = PartialSigMsgType(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Slot'
	p.Slot = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Identifier'
	copy(p.Identifier[:], buf[16:72])

	// Offset (3) 'Signatures'
	if o3 = ssz.ReadOffset(buf[72:76]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 < 76 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'Signatures'
	{
		buf = tail[o3:]
		num, err := ssz.DivideInt2(len(buf), 128, 13)
		if err != nil {
			return err
		}
		p.Signatures = make([]*PartialSignatureMessage, num)
		for ii := 0; ii < num; ii++ {
			if p.Signatures[ii] == nil {
				p.Signatures[ii] = new(PartialSignatureMessage)
			}
			if err = p.Signatures[ii].UnmarshalSSZ(buf[ii*128 : (ii+1)*128]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialSignatureMessages object
func (p *PartialSignatureMessages) SizeSSZ() (size int) {
	size = 76

	// Field (3) 'Signatures'
	size += len(p.Signatures) * 128

	return
}

// HashTreeRoot ssz hashes the PartialSignatureMessages object
func (p *PartialSignatureMessages) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialSignatureMessages object with a hasher
func (p *PartialSignatureMessages) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	hh.PutUint64(uint64(p.Type))

	// Field (1) 'Slot'
	hh.PutUint64(p.Slot)

	// Field (2) 'Identifier'
	hh.PutBytes(p.Identifier[:])

	// Field (3) 'Signatures'
	{
		subIndx := hh.Index()
		num := uint64(len(p.Signatures))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range p.Signatures {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PartialSignatureMessages object
func (p *PartialSignatureMessages) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the SignedPartialSignatureMessages object
func (s *SignedPartialSignatureMessages) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedPartialSignatureMessages object to a target array
func (s *SignedPartialSignatureMessages) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(108)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Message.SizeSSZ()

	// Field (1) 'Signature'
	dst = append(dst, s.Signature[:]...)

	// Field (2) 'Signer'
	dst = ssz.MarshalUint64(dst, s.Signer)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedPartialSignatureMessages object
func (s *SignedPartialSignatureMessages) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 108 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 108 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	copy(s.Signature[:], buf[4:100])

	// Field (2) 'Signer'
	s.Signer = ssz.UnmarshallUint64(buf[100:108])

	// Field (0) 'Message'
	{
		buf = tail[o0:]
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedPartialSignatureMessages object
func (s *SignedPartialSignatureMessages) SizeSSZ() (size int) {
	size = 108

	// Field (0) 'Message'
	size += s.Message.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedPartialSignatureMessages object
func (s *SignedPartialSignatureMessages) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedPartialSignatureMessages object with a hasher
func (s *SignedPartialSignatureMessages) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	hh.PutBytes(s.Signature[:])

	// Field (2) 'Signer'
	hh.PutUint64(s.Signer)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedPartialSignatureMessages object
func (s *SignedPartialSignatureMessages) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
