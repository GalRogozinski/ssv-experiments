// Code generated by fastssz. DO NOT EDIT.
// Hash: 71a6c3bd306e19d311f3e49ce944c7b2beddf065d9601a38d3fcbbf8194b2f38
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ConsensusData object
func (c *ConsensusData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConsensusData object to a target array
func (c *ConsensusData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(80)

	// Field (0) 'Duty'
	if c.Duty == nil {
		c.Duty = new(Duty)
	}
	if dst, err = c.Duty.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'DataVersion'
	dst = ssz.MarshalUint64(dst, c.DataVersion)

	// Offset (2) 'PreConsensusJustification'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.PreConsensusJustification); ii++ {
		offset += 4
		offset += c.PreConsensusJustification[ii].SizeSSZ()
	}

	// Offset (3) 'DataSSZ'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.DataSSZ)

	// Field (2) 'PreConsensusJustification'
	if size := len(c.PreConsensusJustification); size > 13 {
		err = ssz.ErrListTooBigFn("ConsensusData.PreConsensusJustification", size, 13)
		return
	}
	{
		offset = 4 * len(c.PreConsensusJustification)
		for ii := 0; ii < len(c.PreConsensusJustification); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.PreConsensusJustification[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.PreConsensusJustification); ii++ {
		if dst, err = c.PreConsensusJustification[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (3) 'DataSSZ'
	if size := len(c.DataSSZ); size > 4194304 {
		err = ssz.ErrBytesLengthFn("ConsensusData.DataSSZ", size, 4194304)
		return
	}
	dst = append(dst, c.DataSSZ...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConsensusData object
func (c *ConsensusData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 80 {
		return ssz.ErrSize
	}

	tail := buf
	var o2, o3 uint64

	// Field (0) 'Duty'
	if c.Duty == nil {
		c.Duty = new(Duty)
	}
	if err = c.Duty.UnmarshalSSZ(buf[0:64]); err != nil {
		return err
	}

	// Field (1) 'DataVersion'
	c.DataVersion = ssz.UnmarshallUint64(buf[64:72])

	// Offset (2) 'PreConsensusJustification'
	if o2 = ssz.ReadOffset(buf[72:76]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 80 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (3) 'DataSSZ'
	if o3 = ssz.ReadOffset(buf[76:80]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (2) 'PreConsensusJustification'
	{
		buf = tail[o2:o3]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		c.PreConsensusJustification = make([]*SignedPartialSignatureMessages, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.PreConsensusJustification[indx] == nil {
				c.PreConsensusJustification[indx] = new(SignedPartialSignatureMessages)
			}
			if err = c.PreConsensusJustification[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (3) 'DataSSZ'
	{
		buf = tail[o3:]
		if len(buf) > 4194304 {
			return ssz.ErrBytesLength
		}
		if cap(c.DataSSZ) == 0 {
			c.DataSSZ = make([]byte, 0, len(buf))
		}
		c.DataSSZ = append(c.DataSSZ, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConsensusData object
func (c *ConsensusData) SizeSSZ() (size int) {
	size = 80

	// Field (2) 'PreConsensusJustification'
	for ii := 0; ii < len(c.PreConsensusJustification); ii++ {
		size += 4
		size += c.PreConsensusJustification[ii].SizeSSZ()
	}

	// Field (3) 'DataSSZ'
	size += len(c.DataSSZ)

	return
}

// HashTreeRoot ssz hashes the ConsensusData object
func (c *ConsensusData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConsensusData object with a hasher
func (c *ConsensusData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Duty'
	if c.Duty == nil {
		c.Duty = new(Duty)
	}
	if err = c.Duty.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'DataVersion'
	hh.PutUint64(c.DataVersion)

	// Field (2) 'PreConsensusJustification'
	{
		subIndx := hh.Index()
		num := uint64(len(c.PreConsensusJustification))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.PreConsensusJustification {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (3) 'DataSSZ'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(c.DataSSZ))
		if byteLen > 4194304 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(c.DataSSZ)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (4194304+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ConsensusData object
func (c *ConsensusData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
