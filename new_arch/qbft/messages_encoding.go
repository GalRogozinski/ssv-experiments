// Code generated by fastssz. DO NOT EDIT.
// Hash: 8893757ff0565745386c452f2eadda369cdd0be9fbcd05349a4592f3572b3766
// Version: 0.1.3
package qbft

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(64)

	// Field (0) 'MsgType'
	dst = ssz.MarshalUint64(dst, m.MsgType)

	// Field (1) 'Round'
	dst = ssz.MarshalUint64(dst, m.Round)

	// Field (2) 'Root'
	dst = append(dst, m.Root[:]...)

	// Field (3) 'DataRound'
	dst = ssz.MarshalUint64(dst, m.DataRound)

	// Offset (4) 'RoundChangeJustification'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
		offset += 4
		offset += len(m.RoundChangeJustification[ii])
	}

	// Offset (5) 'PrepareJustification'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(m.PrepareJustification); ii++ {
		offset += 4
		offset += len(m.PrepareJustification[ii])
	}

	// Field (4) 'RoundChangeJustification'
	if size := len(m.RoundChangeJustification); size > 13 {
		err = ssz.ErrListTooBigFn("Message.RoundChangeJustification", size, 13)
		return
	}
	{
		offset = 4 * len(m.RoundChangeJustification)
		for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(m.RoundChangeJustification[ii])
		}
	}
	for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
		if size := len(m.RoundChangeJustification[ii]); size > 65536 {
			err = ssz.ErrBytesLengthFn("Message.RoundChangeJustification[ii]", size, 65536)
			return
		}
		dst = append(dst, m.RoundChangeJustification[ii]...)
	}

	// Field (5) 'PrepareJustification'
	if size := len(m.PrepareJustification); size > 13 {
		err = ssz.ErrListTooBigFn("Message.PrepareJustification", size, 13)
		return
	}
	{
		offset = 4 * len(m.PrepareJustification)
		for ii := 0; ii < len(m.PrepareJustification); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(m.PrepareJustification[ii])
		}
	}
	for ii := 0; ii < len(m.PrepareJustification); ii++ {
		if size := len(m.PrepareJustification[ii]); size > 65536 {
			err = ssz.ErrBytesLengthFn("Message.PrepareJustification[ii]", size, 65536)
			return
		}
		dst = append(dst, m.PrepareJustification[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 64 {
		return ssz.ErrSize
	}

	tail := buf
	var o4, o5 uint64

	// Field (0) 'MsgType'
	m.MsgType = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Round'
	m.Round = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Root'
	copy(m.Root[:], buf[16:48])

	// Field (3) 'DataRound'
	m.DataRound = ssz.UnmarshallUint64(buf[48:56])

	// Offset (4) 'RoundChangeJustification'
	if o4 = ssz.ReadOffset(buf[56:60]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 64 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (5) 'PrepareJustification'
	if o5 = ssz.ReadOffset(buf[60:64]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (4) 'RoundChangeJustification'
	{
		buf = tail[o4:o5]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		m.RoundChangeJustification = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 65536 {
				return ssz.ErrBytesLength
			}
			if cap(m.RoundChangeJustification[indx]) == 0 {
				m.RoundChangeJustification[indx] = make([]byte, 0, len(buf))
			}
			m.RoundChangeJustification[indx] = append(m.RoundChangeJustification[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (5) 'PrepareJustification'
	{
		buf = tail[o5:]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		m.PrepareJustification = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 65536 {
				return ssz.ErrBytesLength
			}
			if cap(m.PrepareJustification[indx]) == 0 {
				m.PrepareJustification[indx] = make([]byte, 0, len(buf))
			}
			m.PrepareJustification[indx] = append(m.PrepareJustification[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 64

	// Field (4) 'RoundChangeJustification'
	for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
		size += 4
		size += len(m.RoundChangeJustification[ii])
	}

	// Field (5) 'PrepareJustification'
	for ii := 0; ii < len(m.PrepareJustification); ii++ {
		size += 4
		size += len(m.PrepareJustification[ii])
	}

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgType'
	hh.PutUint64(m.MsgType)

	// Field (1) 'Round'
	hh.PutUint64(m.Round)

	// Field (2) 'Root'
	hh.PutBytes(m.Root[:])

	// Field (3) 'DataRound'
	hh.PutUint64(m.DataRound)

	// Field (4) 'RoundChangeJustification'
	{
		subIndx := hh.Index()
		num := uint64(len(m.RoundChangeJustification))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range m.RoundChangeJustification {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 65536 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (65536+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (5) 'PrepareJustification'
	{
		subIndx := hh.Index()
		num := uint64(len(m.PrepareJustification))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range m.PrepareJustification {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 65536 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (65536+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the SignedMessage object
func (s *SignedMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedMessage object to a target array
func (s *SignedMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(108)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Message.SizeSSZ()

	// Field (1) 'Signature'
	dst = append(dst, s.Signature[:]...)

	// Offset (2) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Offset (3) 'FullData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.FullData)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Signers'
	if size := len(s.Signers); size > 13 {
		err = ssz.ErrListTooBigFn("SignedMessage.Signers", size, 13)
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, s.Signers[ii])
	}

	// Field (3) 'FullData'
	if size := len(s.FullData); size > 4259840 {
		err = ssz.ErrBytesLengthFn("SignedMessage.FullData", size, 4259840)
		return
	}
	dst = append(dst, s.FullData...)

	return
}

// UnmarshalSSZ ssz unmarshals the SignedMessage object
func (s *SignedMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 108 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2, o3 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 108 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	copy(s.Signature[:], buf[4:100])

	// Offset (2) 'Signers'
	if o2 = ssz.ReadOffset(buf[100:104]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'FullData'
	if o3 = ssz.ReadOffset(buf[104:108]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'Message'
	{
		buf = tail[o0:o2]
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'Signers'
	{
		buf = tail[o2:o3]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		s.Signers = ssz.ExtendUint64(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (3) 'FullData'
	{
		buf = tail[o3:]
		if len(buf) > 4259840 {
			return ssz.ErrBytesLength
		}
		if cap(s.FullData) == 0 {
			s.FullData = make([]byte, 0, len(buf))
		}
		s.FullData = append(s.FullData, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedMessage object
func (s *SignedMessage) SizeSSZ() (size int) {
	size = 108

	// Field (0) 'Message'
	size += s.Message.SizeSSZ()

	// Field (2) 'Signers'
	size += len(s.Signers) * 8

	// Field (3) 'FullData'
	size += len(s.FullData)

	return
}

// HashTreeRoot ssz hashes the SignedMessage object
func (s *SignedMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedMessage object with a hasher
func (s *SignedMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	hh.PutBytes(s.Signature[:])

	// Field (2) 'Signers'
	{
		if size := len(s.Signers); size > 13 {
			err = ssz.ErrListTooBigFn("SignedMessage.Signers", size, 13)
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Signers {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Signers))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (3) 'FullData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.FullData))
		if byteLen > 4259840 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(s.FullData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (4259840+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedMessage object
func (s *SignedMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
