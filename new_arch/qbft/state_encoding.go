// Code generated by fastssz. DO NOT EDIT.
// Hash: f3ddfe9b5e0ac0c561ddeeea1ae29e8bdb3431c5ea36c626950fce9fa282e02d
// Version: 0.1.2
package qbft

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/new_arch/p2p"
	"ssv-experiments/new_arch/types"
)

// MarshalSSZ ssz marshals the State object
func (s *State) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the State object to a target array
func (s *State) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Share'
	if s.Share == nil {
		s.Share = new(types.Share)
	}
	if dst, err = s.Share.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Identifier'
	dst = append(dst, s.Identifier[:]...)

	// Field (2) 'Height'
	dst = ssz.MarshalUint64(dst, s.Height)

	return
}

// UnmarshalSSZ ssz unmarshals the State object
func (s *State) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 124 {
		return ssz.ErrSize
	}

	// Field (0) 'Share'
	if s.Share == nil {
		s.Share = new(types.Share)
	}
	if err = s.Share.UnmarshalSSZ(buf[0:60]); err != nil {
		return err
	}

	// Field (1) 'Identifier'
	copy(s.Identifier[:], buf[60:116])

	// Field (2) 'Height'
	s.Height = ssz.UnmarshallUint64(buf[116:124])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the State object
func (s *State) SizeSSZ() (size int) {
	size = 124
	return
}

// HashTreeRoot ssz hashes the State object
func (s *State) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the State object with a hasher
func (s *State) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Share'
	if s.Share == nil {
		s.Share = new(types.Share)
	}
	if err = s.Share.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Identifier'
	hh.PutBytes(s.Identifier[:])

	// Field (2) 'Height'
	hh.PutUint64(s.Height)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the State object
func (s *State) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
