// Code generated by fastssz. DO NOT EDIT.
// Hash: 218de8e61d59ee9f6fb8471866021a68a27548e7f8e24f512b45e8e8ea5ec88c
// Version: 0.1.2
package ssv

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Runner object
func (r *Runner) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the Runner object to a target array
func (r *Runner) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'State'
	dst = ssz.WriteOffset(dst, offset)
	offset += r.State.SizeSSZ()

	// Field (0) 'State'
	if dst, err = r.State.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Runner object
func (r *Runner) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'State'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'State'
	{
		buf = tail[o0:]
		if err = r.State.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Runner object
func (r *Runner) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'State'
	size += r.State.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the Runner object
func (r *Runner) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the Runner object with a hasher
func (r *Runner) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'State'
	if err = r.State.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Runner object
func (r *Runner) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(r)
}
