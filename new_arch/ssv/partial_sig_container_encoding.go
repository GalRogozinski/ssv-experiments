// Code generated by fastssz. DO NOT EDIT.
// Hash: dc6939d0ef7bc7461882abc965137b674c1b6d25dcdf0ca9115d94afbb8837a8
// Version: 0.1.2
package ssv

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/new_arch/types"
)

// MarshalSSZ ssz marshals the PartialSignatureContainer object
func (p *PartialSignatureContainer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialSignatureContainer object to a target array
func (p *PartialSignatureContainer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'Types'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Types) * 8

	// Offset (1) 'Containers'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(p.Containers); ii++ {
		offset += 4
		offset += p.Containers[ii].SizeSSZ()
	}

	// Field (0) 'Types'
	if size := len(p.Types); size > 24 {
		err = ssz.ErrListTooBigFn("PartialSignatureContainer.Types", size, 24)
		return
	}
	for ii := 0; ii < len(p.Types); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(p.Types[ii]))
	}

	// Field (1) 'Containers'
	if size := len(p.Containers); size > 24 {
		err = ssz.ErrListTooBigFn("PartialSignatureContainer.Containers", size, 24)
		return
	}
	{
		offset = 4 * len(p.Containers)
		for ii := 0; ii < len(p.Containers); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += p.Containers[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(p.Containers); ii++ {
		if dst, err = p.Containers[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PartialSignatureContainer object
func (p *PartialSignatureContainer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Types'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Containers'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'Types'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 8, 24)
		if err != nil {
			return err
		}
		p.Types = ssz.ExtendUint64(p.Types, num)
		for ii := 0; ii < num; ii++ {
			p.Types[ii] = PartialSignatureType(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}

	// Field (1) 'Containers'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 24)
		if err != nil {
			return err
		}
		p.Containers = make([]*types.SignedPartialSignatureMessages, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if p.Containers[indx] == nil {
				p.Containers[indx] = new(types.SignedPartialSignatureMessages)
			}
			if err = p.Containers[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialSignatureContainer object
func (p *PartialSignatureContainer) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Types'
	size += len(p.Types) * 8

	// Field (1) 'Containers'
	for ii := 0; ii < len(p.Containers); ii++ {
		size += 4
		size += p.Containers[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the PartialSignatureContainer object
func (p *PartialSignatureContainer) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialSignatureContainer object with a hasher
func (p *PartialSignatureContainer) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Types'
	{
		if size := len(p.Types); size > 24 {
			err = ssz.ErrListTooBigFn("PartialSignatureContainer.Types", size, 24)
			return
		}
		subIndx := hh.Index()
		for _, i := range p.Types {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(p.Types))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(24, numItems, 8))
	}

	// Field (1) 'Containers'
	{
		subIndx := hh.Index()
		num := uint64(len(p.Containers))
		if num > 24 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range p.Containers {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 24)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PartialSignatureContainer object
func (p *PartialSignatureContainer) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
